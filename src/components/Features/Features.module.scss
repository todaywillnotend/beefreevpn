@import "../../styles/variables";
@import "../../styles/mixins";

.featuresSection {
  background-color: $white;
  position: relative;
  overflow-x: clip;
}

.featuresContainer {
  max-width: 1000px;
}

.featuresHeader {
  text-align: center;
  margin-bottom: $spacer * 3.5;
  @include respond-to(md) {
    margin-bottom: $spacer * 4.5;
  }
}
.sectionTitle {
  font-size: 1.5rem;
  color: $text-dark;
  font-weight: 600;
  line-height: 1.3;
  @include respond-to(md) {
    font-size: 2.25rem;
  }
}

.featuresLayout {
  display: grid;
  grid-template-columns: 1fr;
  gap: $spacer * 2;

  @include respond-to(lg) {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    grid-template-rows: repeat(5, 1fr);
    gap: $spacer * 1;
  }
}

.decorativeTextFeatures {
  display: none;
  @include respond-to(xl) {
    display: block;
    position: absolute;
    left: 0;
    top: 50%;
    transform: translate(-70%, -50%);
    font-size: 4.5rem;
    font-weight: 800;
    color: rgba($primary-color, 0.05);
    line-height: 0.9;
    text-align: center;
    letter-spacing: 0.03em;
    z-index: 0;
    user-select: none;
    white-space: nowrap;
  }
}

.featuresColumn {
  display: flex;
  flex-direction: column;
  gap: $spacer * 2.5;
  z-index: 1;
}

.centerColContainer {
  @include respond-to(lg) {
    display: flex; // Позволяет .centerBlock расти/сжиматься внутри
    // align-items: center; // Если нужно вертикальное центрирование, если .centerBlock меньше колонки
  }
}

.featureItem {
  background-color: $white;
  border: 1px solid $border-color-light;
  border-radius: $border-radius-card;
  padding: $spacer * 1.75 $spacer * 1.5;
  display: flex;
  flex-direction: column;
  // align-items: center;
  // text-align: center;
  box-shadow: 0 2px 8px rgba($black, 0.03);
  transition: transform 0.25s ease-out, box-shadow 0.25s ease-out;
  // min-height: 230px; // Минимальная высота карточки, чтобы они были примерно одинаковы

  &:hover {
    transform: translateY(-5px);
    box-shadow: 0 6px 16px rgba($black, 0.06);
  }

  &5 {
    color: $white;
    font-size: 2rem;
    align-items: center;
    font-weight: bold;
    background-color: $primary-color;
    color: $white;
  }

  &6 {
    font-size: 2rem;
    align-items: center;
    font-weight: bold;
    flex-direction: row;
    justify-content: center;
    gap: 1rem;

    .beeIcon {
      width: 64px;
      height: 64px;
    }
  }

  @include respond-to(lg) {
    &1 {
      grid-area: 1 / 1 / 3 / 2;
    }

    &2 {
      grid-area: 2 / 2 / 4 / 3;
    }
    &3 {
      grid-area: 3 / 1 / 5 / 2;
    }

    &4 {
      grid-area: 4 / 2 / 6 / 3;
    }

    &5 {
      grid-area: 1 / 2 / 2 / 3;
      font-size: 4rem;
    }

    &6 {
      grid-area: 5 / 1 / 6 / 2;
      font-size: 4rem;

      .beeIcon {
        width: 105px;
        height: 105px;
      }
    }
  }
}

.featureIconWrapper {
  width: 40px;
  height: 40px;
  border-radius: 20px;
  background-color: $primary-color;
  display: flex;
  align-items: center;
  justify-content: center;
  margin-bottom: $spacer * 1.25;
  flex-shrink: 0;

  @include respond-to(lg) {
    width: 105px;
    height: 105px;
  }
}
.featureIcon {
  width: 20px;
  height: 20px;

  @include respond-to(lg) {
    width: 65px;
    height: 65px;
  }
}
.featureTextContent {
}
.featureTitle {
  font-size: 1.5rem;
  font-weight: 600;
  color: $text-dark;
  margin-bottom: calc($spacer / 1.5);

  @include respond-to(md) {
    font-size: 2rem;
  }
}
.featureDescription {
  font-size: 0.75rem;
  color: $text-medium;
  line-height: 1.6;

  @include respond-to(md) {
    font-size: 1rem;
  }
}

.centerBlock {
  background-color: $primary-color;
  color: $text-black;
  border-radius: $border-radius-card;
  padding: $spacer * 2 $spacer * 1.5;
  display: flex;
  align-items: center;
  justify-content: center;
  text-align: center;
  font-size: 1.6rem;
  font-weight: 800;
  letter-spacing: 0.02em;
  box-shadow: 0 2px 8px rgba($primary-color, 0.15);
  width: 100%;
  // Высота центрального блока должна быть примерно как у одной карточки .featureItem
  // Если .featureItem имеет min-height: 230px, то и здесь должно быть ~230px
  height: 230px; // Задаем такую же высоту, как у .featureItem (или min-height)
  // Для того чтобы он растягивался если колонка выше (из-за align-items: stretch у родителя)
  // можно использовать align-self: stretch; (но тогда height: auto)

  @include respond-to(lg) {
    font-size: 1.75rem;
    // Если вы хотите, чтобы он был всегда по высоте равен ОДНОЙ featureItem,
    // то height: 230px (или значение min-height от featureItem) - это правильный путь.
    // Если он должен быть равен высоте ДВУХ featureItem + отступ, то
    // height: calc(230px * 2 + $spacer * 2.5); // Это сделает его очень высоким
  }
}

.featuresCta {
  margin-top: $spacer * 4;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: $spacer * 1.5;
}

.ctaButton {
  @include btn;
  color: $text-dark;
  background-color: transparent;
  border: 1px solid $border-color;
  border-radius: $border-radius;
  padding: calc($spacer * 0.75) calc($spacer * 2);
  font-size: 0.95rem;
  font-weight: 500;
  transition: background-color 0.2s ease, border-color 0.2s ease,
    color 0.2s ease;
  &:hover {
    background-color: $background-light;
    border-color: darken($border-color, 8%);
  }
}
.ctaButtonIcon {
  width: 16px;
  height: 16px;
  margin-left: $spacer * 0.5;
  vertical-align: middle;
}
